"""Plots the channel image
Args:
    image (SpmImage): SpmImage object
    channel_name (str): string specifying the channel name to return, backward channels are generated by a suffix " bwd".
    background (Background): type of background correction.
    pixel_units (bool): specifies whether to use pixel units (otherwise physical units are used).
    args: extra keyword arguments that will be passed on to plot_data (and there to heatmap).
Returns:
    plot of channel.
"""
function plot_channel(image::SpmImage, channel_name::String; background::Background=no_correction, pixel_units::Bool=false, args...) :: Plots.Plot
    channel = get_channel(image, channel_name)
    title = string_prettify(channel_name) * " [$(channel.unit)]"

    if pixel_units
        x_label = "px"
        y_label = "px"
        return plot_data(channel.data, background=background, title=title, x_label=x_label, y_label=y_label; args...)
    else
        x_label = image.scansize_unit
        y_label = image.scansize_unit
        return plot_data(channel.data, background=background, title=title, x_label=x_label, y_label=y_label, scansize=image.scansize; args...)
    end
end


"""Plots 2D data
Args:
    data (array): 2d data array to be plotted.
    background (Background): type of background correction.
    title (str): string specifying the image title.
    x_label (str): x label.
    y_label (str): y label.
    scansize (array of float): scansize in physical units.
    args: extra keyword arguments to be passed to the heatmap function.
Returns:
    plot of the data.
"""
function plot_data(data::Array{<:Number,2}; background::Background=no_correction, title::String="", x_label::String="", y_label::String="", scansize::Vector{<:Number}=Vector{Float64}(undef, 0), args...) :: Plots.Plot
    if background != no_correction
        data = correct_background(data, background)
    end
    if length(scansize) == 2  # physical units
        xs = range(0, scansize[1], length=size(data)[2])
        ys = range(0, scansize[2], length=size(data)[1])
        xlim = (0, scansize[1])
        ylim = (0, scansize[2])
        p = heatmap(xs, ys, data, aspect_ratio=1, color=:grays; args...)
    else  # pixel units
        p = heatmap(data, aspect_ratio=1, color=:grays; args...)
        xlim = (0, size(data)[2])
        ylim = (0, size(data)[1])
    end
    title!(p, title)
    xlabel!(p, x_label)
    ylabel!(p, y_label)
    xlims!(p, xlim)
    ylims!(p, ylim)
    return p
end